## To setup development env in Docker:
## - go to the "./docker-compose example" folder
## - make a copy of (or rename) "example.env" to ".env"
## - edit it and set correct values for vars inside according to the descriptions
## - read and understand "Makefile" at the same folder, "docker-compose-dev.yml", and "Dockerfile-dev" in the project root folder
## - go to the "./docker-compose example" folder and run "make dev" command
## if you did everything correctly, you should have "photoview-dev" and "photoview-dev-mariadb" containers running with the 8008 (and optionally 3307) port opened for external connection
## - run "make dev" command every time, you need to rebuild project with recent changes
## - run "make dev-down" to shut down the development env

### Build UI ###
FROM --platform=${BUILDPLATFORM:-linux/amd64} node:18

ARG REACT_APP_API_ENDPOINT
ENV REACT_APP_API_ENDPOINT=${REACT_APP_API_ENDPOINT}

# Set environment variable UI_PUBLIC_URL from build args, uses "/" as default
ARG UI_PUBLIC_URL
ENV UI_PUBLIC_URL=${UI_PUBLIC_URL:-/}

ARG VERSION
ENV VERSION=${VERSION:-undefined}
ENV REACT_APP_BUILD_VERSION=${VERSION:-undefined}

ARG BUILD_DATE
ENV BUILD_DATE=${BUILD_DATE:-undefined}
ENV REACT_APP_BUILD_DATE=${BUILD_DATE:-undefined}

ARG COMMIT_SHA
ENV COMMIT_SHA=${COMMIT_SHA:-}
ENV REACT_APP_BUILD_COMMIT_SHA=${COMMIT_SHA:-}

COPY ui /app
WORKDIR /app
# Download dependencies
RUN npm ci --ignore-scripts \
  # Build frontend
  && npm run build -- --base=$UI_PUBLIC_URL

### Build API ###
ENV TARGETPLATFORM=${BUILDPLATFORM:-linux/amd64}

COPY docker/install_build_dependencies.sh /tmp/
COPY docker/go_wrapper.sh /go/bin/go
COPY api /app
WORKDIR /app

ENV GOPATH="/go"
ENV PATH="${GOPATH}/bin:${PATH}"
ENV CGO_ENABLED 1

# Download dependencies
RUN chmod +x /tmp/install_build_dependencies.sh \
  && chmod +x /go/bin/go \
  && /tmp/install_build_dependencies.sh \
  && go env \
  && go mod download \
  # Patch go-face
  && sed -i 's/-march=native//g' ${GOPATH}/pkg/mod/github.com/!kagami/go-face*/face.go \
  # Build dependencies that use CGO
  && go install \
    github.com/mattn/go-sqlite3 \
    github.com/Kagami/go-face \
  # Build api source
  && go build -v -o photoview . \
  ### Final stage ###
  && apt update \
  # Required dependencies
  && apt install -y curl gpg libdlib19.1 ffmpeg exiftool libheif1 \
  # Install Darktable if building for a supported architecture
  && if [ "${TARGETPLATFORM}" = "linux/amd64" ] || [ "${TARGETPLATFORM}" = "linux/arm64" ]; then \
    apt install -y darktable; fi \
  && cp -r /app/dist /ui

ENV PHOTOVIEW_LISTEN_IP 127.0.0.1
ENV PHOTOVIEW_LISTEN_PORT 80

ENV PHOTOVIEW_SERVE_UI 1
ENV PHOTOVIEW_UI_PATH /ui

EXPOSE 80

HEALTHCHECK --interval=60s --timeout=10s CMD curl --fail 'http://localhost:80/api/graphql' -X POST -H 'Content-Type: application/json' --data-raw '{"operationName":"CheckInitialSetup","variables":{},"query":"query CheckInitialSetup { siteInfo { initialSetup }}"}'

ENTRYPOINT ["/app/photoview"]
