##================***================##
## These are the environment setup variables.
## Start setting up your instance from here.
## Syntax of the .env file is next:
## VARIABLE_NAME=variable value with everything after the '=' and till the end of the line.
## The variables with values, set in the docker-compose.yml directly, are for advanced configuration.
##================***================##

##----------Host variables-----------##
## This is the current folder, where all Photoview files and folders (except of your media library) are located
HOST_PHOTOVIEW_LOCATION=/opt/photoview

## This is where your original photos and videos located.
## Provide here the path to single root folder for your media collection.
HOST_PHOTOVIEW_MEDIA_ROOT=/your/root/media/folder
## If you'd like to map multiple folders from different locations, create additional variables
## here like the next one and modify the docker-compose.yml to match them and use in volume mappings.
# HOST_PHOTOVIEW_MEDIA_FAMILY=/full/path/to/folder

## This is where the Photoview data will be backed up
HOST_PHOTOVIEW_BACKUP=/media/Backup/PhotoView
##-----------------------------------##

##-------Photoview variables---------##
## PHOTOVIEW_DATABASE_DRIVER could have one of values: `postgres` (default), `mysql`, `sqlite`
PHOTOVIEW_DATABASE_DRIVER=postgres

## Optional: To enable map related features, you need to create a mapbox token.
## A token can be generated for free here https://account.mapbox.com/access-tokens/
## It's a good idea to limit the scope of the token to your own domain, to prevent others from using it.
# MAPBOX_TOKEN=yourToken
##-----------------------------------##

##---------FFmpeg variables----------##
## FFmpeg is an optional external video processin service, which allows to get benefits of hardware acceleration
## Uncomment its variables only if you set it up in your environment,
## otherwise keep commented out to use the default internal FFmpeg tool
# PHOTOVIEW_FFMPEG_BASE_URL=http://photoview-ffmpeg
# PHOTOVIEW_FFMPEG_USER=fFmp3G
# PHOTOVIEW_FFMPEG_PASSWORD=FFmpegSecret
# PHOTOVIEW_FFMPEG_PORT=5000
## Set the timeout in seconds to the time, longer than the longest expected video processing job, but avoid
## setting too long values, so that if a job hangs, it gets terminated by the server at reasonable time
# PHOTOVIEW_FFMPEG_TIMEOUT=3600
## Set PHOTOVIEW_FFMPEG_WORKERS to something like 2*(number of CPU cores, available to the FFmpeg container)
## This is not a strict rule and you might optimize the value for your case. Check Gunicorn Gevent docs.
# PHOTOVIEW_FFMPEG_WORKERS=3
## Log Level can be one of: DEBUG, INFO, WARNING, ERROR, and CRITICAL
# PHOTOVIEW_FFMPEG_LOGLEVEL=INFO
##-----------------------------------##

##-------PostgreSQL variables--------##
## Comment out  the next lines if PHOTOVIEW_DATABASE_DRIVER is `mysql` or `sqlite`
## Use password generator to generate secret values and replace these defaults
PGSQL_DATABASE=photoview
PGSQL_USER=photoview
PGSQL_PASSWORD=superphotosecret
## See https://www.postgresql.org/docs/current/libpq-ssl.html for possible ssl modes
PGSQL_SSL_MODE=prefer
##-----------------------------------##

##--------MariaDB variables----------##
## Uncomment these variables if PHOTOVIEW_DATABASE_DRIVER is `mysql`
## Use password generator to generate secret values and replace these defaults
# MARIADB_DATABASE=photoview
# MARIADB_USER=photoview
# MARIADB_PASSWORD=photosecret
# MARIADB_ROOT_PASSWORD=superphotosecret
##-----------------------------------##

##---------SQLite variables----------##
## Uncomment the next line if PHOTOVIEW_DATABASE_DRIVER is `sqlite`
# PHOTOVIEW_SQLITE_PATH=/home/photoview/database/photoview.db
##-----------------------------------##

##-------Watchtower variables--------##
## The POLL_INTERVAL in sec
WATCHTOWER_POLL_INTERVAL=86400
WATCHTOWER_TIMEOUT=30s
WATCHTOWER_CLEANUP=true
##\\\\\\\\\\\\\\\\\//////////////////##
