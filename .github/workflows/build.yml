name: Docker builds

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
    tags:
      - v*
  schedule:
    - cron: '0 1 * * 4'

env:
  DOCKER_USERNAME: kkoval
  DOCKER_IMAGE: kkoval/photoview
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6

jobs:
  get-tag:
    name: Get latest tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_latest_tag
        run: echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

    outputs:
      tag: ${{ steps.get_latest_tag.outputs.TAG }}

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: get-tag
    if: |
      github.event_name == 'pull_request'||
      github.event_name == 'push' ||
      (
        github.event_name == 'schedule' &&
        (
          github.ref == 'refs/heads/master' ||
          github.ref == 'refs/tags/${{ needs.get-tag.outputs.tag }}'
        )
      )

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch branches
        run: git fetch --all

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: github.repository == 'kkovaletp/photoview'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_DOCKER }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        if: |
          success() &&
          github.event_name != 'pull_request' &&
          github.repository == 'kkovaletp/photoview'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: ${{ env.DOCKER_IMAGE }}
          # Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set build args
        id: vars
        run: |
          echo "BUILD_DATE=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "VERSION=kkoval-2-$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Build and Push
        id: docker_buildx
        uses: docker/build-push-action@v6
        with:
          context: .
          sbom: true
          provenance: mode=max
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' && github.repository == 'kkovaletp/photoview' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          annotations: ${{ steps.docker_meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }}
            REACT_APP_BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }}
            VERSION=${{ steps.vars.outputs.VERSION }}
            REACT_APP_BUILD_VERSION=${{ steps.vars.outputs.VERSION }}
            COMMIT_SHA=${{ github.sha }}
            REACT_APP_BUILD_COMMIT_SHA=${{ github.sha }}

  dockle:
    name: Dockle Container Analysis
    runs-on: ubuntu-latest
    needs:
      - get-tag
      - build
    if: |
      github.repository == 'kkovaletp/photoview' &&
      (
        github.event_name == 'push' ||
        (
          github.event_name == 'schedule' &&
          (
            github.ref == 'refs/heads/master' ||
            github.ref == 'refs/tags/${{ needs.get-tag.outputs.tag }}'
          )
        )
      )
    strategy:
      fail-fast: false
      matrix:
        tags: ['master', '${{ needs.get-tag.outputs.tag }}']
    steps:
      # Makes sure your .dockleignore file is available to the next step
      - name: Checkout repository
        if: ${{ matrix.tags != '' }}
        uses: actions/checkout@v4

      - name: Docker Login
        if: ${{ matrix.tags != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Run Dockle
        id: dockle
        if: ${{ matrix.tags != '' }}
        uses: erzz/dockle-action@v1
        with:
          image: kkoval/photoview:${{ matrix.tags }}
          report-name: dockle-results-${{ matrix.tags }}
          report-format: sarif
          failure-threshold: fatal
          exit-code: 1
          timeout: 5m

      - name: Debug
        run: |
          echo "matrix.tags = <${{ matrix.tags != '' }}>"
          echo "steps.dockle.conclusion = <${{ steps.dockle.conclusion }}>"
          echo "matrix.tags != '' : ${{ matrix.tags != '' }}"
          echo "steps.dockle.conclusion == 'success' : ${{ steps.dockle.conclusion == 'success' }}"
          echo "steps.dockle.conclusion == 'failure' : ${{ steps.dockle.conclusion == 'failure' }}"
          echo "conclusion == 'success' || 'failure' : ( ${{ steps.dockle.conclusion == 'success' }} || ${{ steps.dockle.conclusion == 'failure' }} )"
          echo "matrix.tags != '' && conclusion == 'success' || 'failure' : ${{ matrix.tags != '' }} && ( ${{ steps.dockle.conclusion == 'success' }} || ${{ steps.dockle.conclusion == 'failure' }} )"

      - name: Upload SARIF file
        if: |
          ${{ matrix.tags != '' }} &&
          (
            ${{ steps.dockle.conclusion == 'success' }} ||
            ${{ steps.dockle.conclusion == 'failure' }}
          )
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dockle-results-${{ matrix.tags }}.sarif
