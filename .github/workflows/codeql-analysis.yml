name: "Code Analysis"

on:
  push:
    branches: [master]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
  schedule:
    - cron: '0 1 * * 4'

jobs:
  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.languages }}
    steps:
      - name: Get languages from repo
        id: set-matrix
        uses: advanced-security/set-codeql-language-matrix@v1
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}
          endpoint: ${{ github.event.repository.languages_url }}

  analyze:
    name: Analyze
    needs: create-matrix
    if: ${{ needs.create-matrix.outputs.matrix != '[]' }} && github.repository == 'kkovaletp/photoview'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Run further tests
          queries: security-extended, security-and-quality

      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  anchore:
    name: Anchore scan code dependencies
    if: github.repository == 'kkovaletp/photoview'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate report
        id: scan
        uses: anchore/scan-action@v3
        with:
          path: "."
          fail-build: false
          add-cpes-if-none: true

      - name: Upload report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Scan PR source code
        id: scan-fixed
        uses: anchore/scan-action@v3
        if: always() && github.event_name == 'pull_request'
        with:
          path: "."
          add-cpes-if-none: true
          output-format: json
          severity-cutoff: high
          only-fixed: true

      - name: Read JSON
        if: always() && github.event_name == 'pull_request'
        run: |
          echo "JSON_DATA=$(jq -c '.matches' < ${{ steps.scan-fixed.outputs.json }})" >> $GITHUB_ENV

      - name: JSON to Table
        uses: buildingcash/json-to-markdown-table-action@v1
        if: always() && github.event_name == 'pull_request'
        id: table
        with:
          json: ${{ env.JSON_DATA }}

      - name: Encode table to Base64
        if: always() && github.event_name == 'pull_request'
        run: |
          echo "${{ steps.table.outputs.table }}" | base64 -w 0 > table.b64

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            let scanResults = atob(fs.readFileSync('table.b64', 'utf8'));
            let output = '';
            
            console.log(scanResults);

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const botComment = comments.data.find(comment => comment.user.login === 'github-actions[bot]' && comment.body.includes('Anchore'));

            output += '#### Anchore Grype scan results:\n';
            output += 'Anchore Grype detected vulnerabilities in project dependencies, for which fixed versions are available.\n';

            if (scanResults) {
              output += '\n' + scanResults + '\n';

              if (botComment) {
                await github.rest.issues.updateComment({
                  comment_id: botComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                });
              }
            } else {
              if (botComment) {
                await github.rest.issues.deleteComment({
                  comment_id: botComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
              }
            }

  hadolint:
    name: Hadolint Dockerfile
    if: github.repository == 'kkovaletp/photoview'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Lint Dockerfile
        id: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

      - name: Generate report
        uses: hadolint/hadolint-action@v3.1.0
        if: always()
        with:
          dockerfile: Dockerfile
          output-file: hadolint.sarif
          format: sarif
          failure-threshold: ignore

      - name: Upload report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint.sarif

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            let hadolintResults = process.env.HADOLINT_RESULTS;
            let hadolintOutcome = "${{ steps.hadolint.outcome }}";
            let output = '';

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const botComment = comments.data.find(comment => comment.user.login === 'github-actions[bot]' && comment.body.includes('Hadolint'));

            if (hadolintOutcome === 'success') {
              if (botComment) {
                await github.rest.issues.deleteComment({
                  comment_id: botComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
              }
            }else if (hadolintOutcome === 'failure') {

              output += '#### Hadolint: ' + hadolintOutcome + '\n';
              output += 'Hadolint detected issues during execution.\n';
  
              if (hadolintResults) {
                output += '\n```\n' + hadolintResults + '\n```\n';
                output += '\nFind more info about detected issues and recommendations for fixes in the [Rules table](https://github.com/hadolint/hadolint?tab=readme-ov-file#rules).';
              }
  
              if (botComment) {
                await github.rest.issues.updateComment({
                  comment_id: botComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                });
              }
            }
