name: "Code Analysis"

on:
  push:
    branches: [master]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
  schedule:
    # At 01:37 every Thursday. Details in https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule
    - cron: '37 1 * * 4'

jobs:
  create-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Get languages from repo
        id: set-matrix
        uses: advanced-security/set-codeql-language-matrix@v1
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}
          endpoint: ${{ github.event.repository.languages_url }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.languages }}

  code-ql:
    name: CodeQL
    needs: create-matrix
    if: ${{ needs.create-matrix.outputs.matrix != '[]' && github.repository == 'kkovaletp/photoview' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Run further tests
          queries: security-extended, security-and-quality
          # debug: true

      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        with:
          working-directory: ${{ ( matrix.language == 'go' && './api' ) || ( matrix.language == 'javascript' && './ui' ) || '.' }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  anchore:
    name: Anchore scan code dependencies
    if: github.repository == 'kkovaletp/photoview'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Generate report
        id: scan
        uses: anchore/scan-action@v6
        continue-on-error: true
        with:
          path: "."
          fail-build: false
          add-cpes-if-none: true

      - name: Upload report
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ steps.scan.conclusion == 'success' || steps.scan.conclusion == 'failure' }}
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Scan PR source code
        id: scan-fixed
        uses: anchore/scan-action@v6
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        with:
          path: "."
          fail-build: false
          add-cpes-if-none: true
          output-format: json
          severity-cutoff: high
          only-fixed: true

      - name: Prepare JSON
        if: ${{ ( steps.scan-fixed.conclusion == 'success' || steps.scan-fixed.conclusion == 'failure' ) && github.event_name == 'pull_request' }}
        run: |
          jq '{
            "|": (
              .matches
              | map(
                  . + {
                    severity_rank: (
                      {
                        Critical: 1,
                        High: 2,
                        Medium: 3,
                        Low: 4,
                        Negligible: 5,
                        Unknown: 6
                      }[.vulnerability.severity] // 99
                    )
                  }
                )
              | sort_by(.severity_rank, .artifact.name)
              | map({
                  "language": .artifact.language,
                  "id": .vulnerability.id,
                  "severity": .vulnerability.severity,
                  "name": .artifact.name,
                  "version": .artifact.version,
                  "fix-versions": .vulnerability.fix.versions[0],
                  "path": .artifact.locations[0].path,
                  "description": .vulnerability.description
                })
            )
          }' ${{ steps.scan-fixed.outputs.json }} > vulns.json
          cat vulns.json | jq

      - name: JSON to Table
        uses: Teebra/JSON-to-HTML-table@v2.0.0
        if: github.event_name == 'pull_request'
        with:
          json-file: vulns.json

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.COMMENT_TOKEN }}
          script: |
            const fs = require('fs');
            let scanResults = fs.readFileSync('output.html', 'utf8');
            let output = '';

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const botComment = comments.data.find(
              comment => comment.body.includes('Anchore Grype scan results:')
            );

            output += '#### Anchore Grype scan results:\n';
            output += 'Anchore Grype detected vulnerabilities in project dependencies, for which fixed versions are available.\n';
            output += 'Please find more details in the "Checks" tab of this PR > "Code scanning results" > "Grype".\n';

            if (scanResults) {
              output += '\n' + scanResults + '\n';
            } else {
              output += '\nNo vulnerabilities detected.\n';
              output += 'This might also mean that the scan job failed. Please check it.\n';
            }

            if (botComment) {
              await github.rest.issues.deleteComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo
              });
            }
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  hadolint:
    name: Hadolint Dockerfile
    if: github.repository == 'kkovaletp/photoview'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Lint Dockerfile
        id: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          config: ${{ github.workspace }}/.hadolint.yaml
          format: tty
          failure-threshold: error

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: ${{ ( steps.hadolint.conclusion == 'success' || steps.hadolint.conclusion == 'failure' ) && github.event_name == 'pull_request' }}
        with:
          github-token: ${{ secrets.COMMENT_TOKEN }}
          script: |
            let hadolintResults = process.env.HADOLINT_RESULTS;
            let output = '';

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const botComment = comments.data.find(
              comment => comment.body.includes('Hadolint issues:')
            );

            if (hadolintResults) {
              output += '#### Hadolint issues:\n';
              output += 'Hadolint detected issues during execution.\n';
              output += '\n```\n' + hadolintResults + '\n```\n';
              output += '\nFind more info about detected issues and recommendations for fixes in the ';
              output += '[Rules table](https://github.com/hadolint/hadolint?tab=readme-ov-file#rules).';
            } else {
              output += '#### Hadolint issues:\n';
              output += 'Hadolint did not find any issues.\n';
            }

            if (botComment) {
              await github.rest.issues.deleteComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo
              });
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Generate report
        uses: hadolint/hadolint-action@v3.1.0
        id: hadolint-report
        if: always()
        with:
          dockerfile: Dockerfile
          config: ${{ github.workspace }}/.hadolint.yaml
          output-file: hadolint.sarif
          format: sarif
          no-fail: true

      - name: Upload report
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ steps.hadolint-report.conclusion == 'success' || steps.hadolint-report.conclusion == 'failure' }}
        with:
          sarif_file: hadolint.sarif

  coverity:
    name: Coverity Scan
    runs-on: ubuntu-22.04
    if: github.repository == 'kkovaletp/photoview' && github.event_name != 'pull_request'
    env:
      COV_PROJECT: kkovaletp%2Fphotoview
      COV_TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
      COV_EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Fetch branches
        shell: bash
        run: git fetch --all --unshallow

        # Coverity steps are based on the https://github.com/vapier/coverity-scan-action/blob/main/action.yml
        # and the https://github.com/vapier/coverity-scan-action/pull/3/files

        # The Coverity site says the tool is usually updated twice yearly, so the
        # md5 of download can be used to determine whether there's been an update.
      - name: Lookup Coverity Build Tool hash
        id: coverity-cache-lookup
        shell: bash
        run: |
          echo "hash=$(curl https://scan.coverity.com/download/other/linux64 \
            --data "token=${{ env.COV_TOKEN }}&project=${{ env.COV_PROJECT }}&md5=1")" >> $GITHUB_OUTPUT

      # Try to cache the tool to avoid downloading 1GB+ archive on every run.
      # Cache miss will add ~30s to create, but cache hit will save minutes.
      - name: Cache Coverity Analysis Tool
        id: cov-analysis-cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/cov-analysis
          key: cov-analysis-linux64-${{ steps.coverity-cache-lookup.outputs.hash }}

      # Download and unpack the binaries, configure to use our GO compiler
      - name: Install Coverity Analysis Tool
        if: steps.cov-analysis-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl https://scan.coverity.com/download/other/linux64 \
            --no-progress-meter \
            --output cov-analysis.tar.gz \
            --data "token=${{ env.COV_TOKEN }}&project=${{ env.COV_PROJECT }}"
          mkdir ./cov-analysis
          tar -xzf ./cov-analysis.tar.gz --strip 1 -C ./cov-analysis
          rm ./cov-analysis.tar.gz

      # Register Coverity executables in system PATH
      - name: Configure Coverity Analysis tool
        shell: bash
        run: |
          export PATH="${{ github.workspace }}/cov-analysis/bin:${PATH}"
          echo "${{ github.workspace }}/cov-analysis/bin" >> "$GITHUB_PATH"
          cov-configure --javascript

      - name: Build UI image
        uses: docker/build-push-action@v6
        with:
          pull:       true
          push:       false
          load:       true
          target:     ui
          tags:       photoview/ui
          cache-from: type=gha,scope=ui-${{ hashFiles('ui/package-lock.json') }}
          build-args: |
            NODE_ENV=production

      # Build and capture UI code
      - name: Coverity Capture code
        shell: bash
        run: |
          docker run --name cov-ui photoview/ui echo "Container started from the UI build image"
          docker cp cov-ui:/app/ui/dist ${{ github.workspace }}/
          echo "Dist directory copied from the UI container"
          echo ======================================================
          coverity capture --dir ${{ github.workspace }}/cov-int --exclude-language go \
            --file-exclude-regex "^.*\.test\.tsx$|^dev-compose.yaml$"

      # - name: Coverity emit GO code
      #   shell: bash
      #   run: |
      #     find "${{ github.workspace }}/api" -type f -name '*.go' ! -name '*_test.go' \
      #       -not -path "${{ github.workspace }}/api/graphql/resolvers/*" \
      #       -exec dirname {} \; | sort -u | while read -r pkg_dir; do
      #         echo "[INFO] Emitting for package: $pkg_dir"
      #         cov-emit-go --dir ${{ github.workspace }}/cov-int --enable-api-stubs "$pkg_dir"
      #     done

      - name: Coverity Build log
        shell: bash
        run: cat ${{ github.workspace }}/cov-int/build-log.txt || echo "No build log found"

      - name: Coverity Capture files log
        shell: bash
        run: cat ${{ github.workspace }}/cov-int/capture-files-log.txt || echo "No capture files log found"

      - name: Coverity Security DA log
        shell: bash
        run: cat ${{ github.workspace }}/cov-int/security-da-log.txt || echo "No security DA log found"

      # Remove unnecessary captures from the Coverity results before sending them for analysis
      # Extract 'git blame' info for captured files
      - name: Prepare collected results
        shell: bash
        run: |
          cov-manage-emit --dir ${{ github.workspace }}/cov-int \
            --verbose 2 \
            --tu-pattern "file('/.vscode/')" \
            --tu-pattern "file('_test.go')" \
            --tu-pattern "file('generated.go')" \
            --tu-pattern "file('/node_modules/')" \
            --tu-pattern "file('/testing/')" \
            --tu-pattern "file('/__generated__/')" \
            --tu-pattern "file('.test.tsx')" \
            --tu-pattern "file('/cov-analysis/')" \
            --tu-pattern "file('/cov-int/')" \
            --tu-pattern "file('/home/runner/go/pkg/')" \
            list
          cov-manage-emit --dir ${{ github.workspace }}/cov-int \
            --verbose 2 \
            --tu-pattern "file('/.vscode/')" \
            --tu-pattern "file('_test.go')" \
            --tu-pattern "file('generated.go')" \
            --tu-pattern "file('/node_modules/')" \
            --tu-pattern "file('/testing/')" \
            --tu-pattern "file('/__generated__/')" \
            --tu-pattern "file('.test.tsx')" \
            --tu-pattern "file('/cov-analysis/')" \
            --tu-pattern "file('/cov-int/')" \
            --tu-pattern "file('/home/runner/go/pkg/')" \
            delete
          cov-import-scm --scm git \
            --dir ${{ github.workspace }}/cov-int \
            --ms-delay 10 --verbose 0

      # Archive and send all the results to the Coverity server
      - name: Submit results to Coverity Scan
        shell: bash
        run: |
          tar -czvf ./cov-int.tgz ./cov-int
          curl \
            --form token="${{ env.COV_TOKEN }}" \
            --form email="${{ env.COV_EMAIL }}" \
            --form file=@cov-int.tgz \
            --form version="${{ github.sha }}" \
            --form description="coverity-scan-action ${{ github.repository }} / ${{ github.ref }}" \
            "https://scan.coverity.com/builds?project=${{ env.COV_PROJECT }}"
