name: Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-ffmpeg:
    name: Build FFmpeg image for API testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.COMMENT_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/ffmpeg
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          tags: |
            type=sha

      - name: Build and push
        id: docker_buildx
        uses: docker/build-push-action@v5
        with:
          context: ./ffmpeg-image
          pull: true
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

    outputs:
      image_tag: ${{ steps.docker_meta.outputs.tags }}

  test-api:
    name: Test API
    needs: build-ffmpeg
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        database: ['mysql', 'postgres', 'sqlite']

    services:
      mariadb:
        image: mariadb:lts
        env:
          MYSQL_DATABASE: photoview_test
          MYSQL_USER: photoview
          MYSQL_PASSWORD: photosecret
          MYSQL_RANDOM_ROOT_PASSWORD: yes
        # https://github.com/MariaDB/mariadb-docker/issues/497
        options: >-
          --health-cmd="mariadb-admin ping"
          --health-interval=20s
          --health-timeout=5s
          --health-retries=10
        ports:
          - 3306:3306

      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: photoview
          POSTGRES_PASSWORD: photosecret
          POSTGRES_DB: photoview_test
        options: >-
          --health-cmd pg_isready
          --health-interval 20s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

      ffmpeg:
        image: ${{ needs.build-ffmpeg.outputs.image_tag }}
        credentials:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.COMMENT_TOKEN }}
        env:
          PHOTOVIEW_FFMPEG_PORT: 5000
          PHOTOVIEW_FFMPEG_TIMEOUT: 300
          PHOTOVIEW_FFMPEG_LOGLEVEL: DEBUG
          PHOTOVIEW_FFMPEG_WORKERS: 1
          PHOTOVIEW_FFMPEG_USER: ffmpeg
          PHOTOVIEW_FFMPEG_PASSWORD: ffmpeg-pass
        options: >-
          --health-cmd="curl --fail http://localhost:5000/health || exit 1"
          --health-interval 20s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5000:5000

    defaults:
      run:
        working-directory: api

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Fetch branches
        run: git fetch --all

      - name: Set up Go
        uses: actions/setup-go@v5
        id: go
        with:
          go-version-file: ${{ github.workspace }}/api/go.mod
          cache: false

      - name: Cache Go dependencies
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get C dependencies
        run: |
          sudo add-apt-repository ppa:strukturag/libheif
          sudo add-apt-repository ppa:strukturag/libde265
          sudo apt-get update
          sudo apt-get install -y libdlib-dev libblas-dev libatlas-base-dev liblapack-dev libjpeg-turbo8-dev libheif-dev

      - name: Get GO dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build
        run: go build -v .

      - name: Configure MySQL
        if: ${{ matrix.database == 'mysql' }}
        run: |
          cp ../.github/mysql.testing.env testing.env

      - name: Configure Postgres
        if: ${{ matrix.database == 'postgres' }}
        run: |
          cp ../.github/postgres.testing.env testing.env

      - name: Configure Sqlite
        if: ${{ matrix.database == 'sqlite' }}
        run: |
          touch photoview_test.db
          cp ../.github/sqlite.testing.env testing.env

      - name: Test
        run: go test ./... -v -database -filesystem -p 1 -coverprofile=coverage.txt -covermode=atomic -json > test-report.json

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          flags: api
          token: ${{ secrets.CODECOV_TKN }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: always() && github.repository == 'kkovaletp/photoview'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_API }}
        with:
          projectBaseDir: api/

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-ffmpeg, test-api]
    if: always() && needs.build-ffmpeg.result == 'success'
    steps:
      - name: Get image version ID
        id: ver_id
        run: >
          image_tag="${{ needs.build-ffmpeg.outputs.image_tag }}";
          echo "image tag = '${image_tag}'";
          package_tag=${image_tag##*:};
          echo "package tag = '${package_tag}'";
          curl -L
          -H "Accept: application/vnd.github+json"
          -H "Authorization: Bearer ${{ secrets.COMMENT_TOKEN }}"
          -H "X-GitHub-Api-Version: 2022-11-28"
          https://api.github.com/user/packages/container/photoview%2Fffmpeg/versions > ./resp.json;
          cat ./resp.json;
          version_id=$(cat ./resp.json | jq -r '.[] | select(.metadata.container.tags[]? == "${package_tag}") | .id');
          echo "version_id = '${version_id}'";
          echo "version_id=${version_id}" >> $GITHUB_OUTPUT

      - name: Delete Docker image version
        uses: actions/delete-package-versions@v5
        with:
          owner: '${{ github.repository_owner }}'
          token: '${{ secrets.COMMENT_TOKEN }}'
          package-type: 'container'
          package-name: 'ffmpeg'
          package-version-ids: '${{ steps.ver_id.outputs.version_id }}'

  test-ui:
    name: Test UI
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ui

    strategy:
      matrix:
        node-version: [18]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch branches
        run: git fetch --all

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: npm clean-install

      - name: NPM audit
        uses: oke-py/npm-audit-action@v2
        with:
          audit_level: none
          create_issues: false
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dedupe_issues: true
          production_flag: true
          working_directory: ui

      - name: Test
        run: npm run test:ci

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          flags: ui
          token: ${{ secrets.CODECOV_TKN }}

      - name: Run ESLint
        run: |
          npm clean-install --include dev
          npm run lint:ci || true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: always() && github.repository == 'kkovaletp/photoview'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_UI }}
        with:
          projectBaseDir: ui/
